{
  "metadata": {
    "name": "@demo/pre-built-demo",
    "version": "0.0.2",
    "description": "Demonstration of Pre-Builts",
    "license": "Apache-2.0",
    "repository": {
      "type": "local",
      "hostname": "localhost",
      "path": "/"
    },
    "keywords": [
      "demonstration"
    ],
    "author": "Chris Calloway",
    "IAPDependencies": {
      "@itential/app-workflow_engine": "",
      "@itential/app-json_forms": "",
      "@itential/app-form_builder": "",
      "@itential/app-jst": "",
      "@itential/app-mop": "",
      "@itential/app-template_builder": "",
      "@itential/app-configuration_manager": "",
      "@itential/app-operations_manager": ""
    }
  },
  "manifest": {
    "bundleName": "@demo/pre-built-demo",
    "fingerprint": "666710ae01d9b8610cc84bda",
    "createdEpoch": "1718030510504",
    "artifacts": [
      {
        "id": "TPB OM",
        "name": "TPB OM",
        "type": "automation",
        "location": "/bundles/automations/TPB OM.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB childJob Task Child",
        "name": "TPB childJob Task Child",
        "type": "workflow",
        "location": "/bundles/workflows/TPB childJob Task Child.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB childJob Task with Loop and Transformation Child",
        "name": "TPB childJob Task with Loop and Transformation Child",
        "type": "workflow",
        "location": "/bundles/workflows/TPB childJob Task with Loop and Transformation Child.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB Workflow",
        "name": "TPB Workflow",
        "type": "workflow",
        "location": "/bundles/workflows/TPB Workflow.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "Test Workflow",
        "name": "Test Workflow",
        "type": "workflow",
        "location": "/bundles/workflows/Test Workflow.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB JSON Form in OM Trigger",
        "name": "TPB JSON Form in OM Trigger",
        "type": "json-forms",
        "location": "/bundles/json_forms/TPB JSON Form in OM Trigger.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB JSON Form in Workflow",
        "name": "TPB JSON Form in Workflow",
        "type": "json-forms",
        "location": "/bundles/json_forms/TPB JSON Form in Workflow.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB Form",
        "name": "TPB Form",
        "type": "forms",
        "location": "/bundles/forms/TPB Form.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB TextFSM Template",
        "name": "TPB TextFSM Template",
        "type": "template",
        "location": "/bundles/templates/TPB TextFSM Template.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB Jinja2 Template",
        "name": "TPB Jinja2 Template",
        "type": "template",
        "location": "/bundles/templates/TPB Jinja2 Template.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB Command Template",
        "name": "TPB Command Template",
        "type": "mop-template",
        "location": "/bundles/mop_templates/TPB Command Template.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB Analytic Template",
        "name": "TPB Analytic Template",
        "type": "mop-analytic-template",
        "location": "/bundles/mop_analytic_templates/TPB Analytic Template.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "TPB GC Tree",
        "name": "TPB GC Tree",
        "type": "golden-config",
        "location": "/bundles/ucm_golden_configs/TPB GC Tree.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6536e91dbd5eea0160a56829",
        "name": "TPB Transformation in Workflow Task",
        "type": "transformation",
        "location": "/bundles/transformations/TPB Transformation in Workflow Task.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "663da1e431b5e09e96d70e07",
        "name": "TPB Transformation in JSON Form in Workflow",
        "type": "transformation",
        "location": "/bundles/transformations/TPB Transformation in JSON Form in Workflow.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "653681ffa0bf200185226cdb",
        "name": "TPB Transformation in childJob Input",
        "type": "transformation",
        "location": "/bundles/transformations/TPB Transformation in childJob Input.json",
        "properties": {
          "entryPoint": false
        }
      },
      {
        "id": "6536ed38bd5eea0160a5682a",
        "name": "TPB Transformation in API Trigger",
        "type": "transformation",
        "location": "/bundles/transformations/TPB Transformation in API Trigger.json",
        "properties": {
          "entryPoint": false
        }
      }
    ]
  },
  "bundles": [
    {
      "type": "automation",
      "data": {
        "_id": "6536ec614bf4a001bb6fade5",
        "name": "TPB OM",
        "description": "",
        "componentName": "TPB Workflow",
        "componentType": "workflows",
        "gbac": {
          "write": [],
          "read": []
        },
        "created": "2023-10-23T21:57:53.592Z",
        "createdBy": "admin@pronghorn",
        "lastUpdated": "2024-06-06T17:09:53.177Z",
        "lastUpdatedBy": "admin@pronghorn",
        "triggers": [
          {
            "_id": "6661ed62db6dff9d5b848f27",
            "created": "2023-10-23T22:00:40.065Z",
            "createdBy": "admin@pronghorn",
            "lastUpdated": "2024-06-06T17:09:54.651Z",
            "lastUpdatedBy": "admin@pronghorn",
            "name": "Start TPB Workflow with API",
            "type": "endpoint",
            "enabled": true,
            "actionType": "automations",
            "actionId": "6536ec614bf4a001bb6fade5",
            "description": "",
            "verb": "POST",
            "routeName": "tpb",
            "schema": {
              "type": "object",
              "properties": {},
              "additionalProperties": true
            },
            "jst": {
              "_id": "6536ed38bd5eea0160a5682a",
              "name": "TPB Transformation in API Trigger",
              "description": "",
              "incoming": [
                {
                  "$id": "testDeviceName",
                  "type": "string",
                  "examples": [
                    "test"
                  ]
                }
              ],
              "outgoing": [
                {
                  "$id": "formData",
                  "type": "object",
                  "properties": {
                    "device": {
                      "type": "string",
                      "examples": [
                        "test"
                      ]
                    }
                  },
                  "required": []
                }
              ],
              "steps": [
                {
                  "id": 1,
                  "type": "assign",
                  "from": {
                    "location": "incoming",
                    "name": "testDeviceName",
                    "ptr": ""
                  },
                  "to": {
                    "location": "outgoing",
                    "name": "formData",
                    "ptr": "/device"
                  },
                  "context": "#"
                }
              ],
              "functions": [],
              "comments": [],
              "view": {
                "col": 1,
                "row": 5
              },
              "created": "2024-06-06T17:09:50.586Z",
              "createdBy": {
                "_id": "65faf9657e35d89f3c8cbeed",
                "provenance": "local_aaa",
                "username": "admin@pronghorn"
              },
              "lastUpdated": "2024-06-06T17:09:50.586Z",
              "lastUpdatedBy": {
                "_id": "65faf9657e35d89f3c8cbeed",
                "provenance": "local_aaa",
                "username": "admin@pronghorn"
              },
              "version": "4.3.6-2023.2.2",
              "tags": []
            },
            "migrationVersion": 3
          },
          {
            "_id": "6661ed62db6dff9d5b848f26",
            "created": "2023-10-23T21:59:59.510Z",
            "createdBy": "admin@pronghorn",
            "lastUpdated": "2024-06-06T17:09:54.673Z",
            "lastUpdatedBy": "admin@pronghorn",
            "name": "Start TPB Workflow with Form",
            "type": "manual",
            "enabled": true,
            "actionType": "automations",
            "actionId": "6536ec614bf4a001bb6fade5",
            "description": "",
            "formId": "TPB JSON Form in OM Trigger",
            "formData": null,
            "formSchemaHash": "b65f2bc89b3f4c25447e23dc12dfe872571dab1137d437947851621169a28e63",
            "legacyWrapper": true,
            "migrationVersion": 3
          }
        ]
      }
    },
    {
      "type": "workflow",
      "data": {
        "canvasVersion": 3,
        "created": "2023-10-23T14:32:34.295Z",
        "createdVersion": "5.46.0-2023.1.19.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "errorHandler": null,
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {
            "firstName": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello"
              ]
            },
            "lastName": {
              "title": "stringN",
              "type": [
                "array",
                "string",
                "boolean",
                "number"
              ],
              "items": {
                "type": "string"
              },
              "examples": [
                [
                  " World"
                ]
              ]
            }
          },
          "required": [
            "firstName",
            "lastName"
          ]
        },
        "lastUpdatedVersion": "4.69.3-2023.2.73",
        "last_updated": "2024-06-06T17:09:51.129Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "name": "TPB childJob Task Child",
        "outputSchema": {
          "type": "object",
          "properties": {
            "firstName": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello"
              ]
            },
            "lastName": {
              "title": "stringN",
              "type": [
                "array",
                "string",
                "boolean",
                "number"
              ],
              "items": {
                "type": "string"
              },
              "examples": [
                [
                  " World"
                ]
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "combinedStrings": {
              "title": "combinedStrings",
              "type": "string",
              "examples": [
                "Hello World"
              ]
            }
          }
        },
        "preAutomationTime": 0,
        "sla": 0,
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": -384,
              "y": 108
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 180,
              "y": 108
            }
          },
          "a234": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Concatenates strings together.",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "$var.job.firstName",
                "stringN": "$var.job.lastName"
              },
              "outgoing": {
                "combinedStrings": "$var.job.combinedStrings"
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": -108,
              "y": 108
            }
          }
        },
        "transitions": {
          "workflow_start": {
            "a234": {
              "state": "success",
              "type": "standard"
            }
          },
          "workflow_end": {},
          "a234": {
            "workflow_end": {
              "state": "success",
              "type": "standard"
            }
          }
        },
        "type": "automation",
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "type": "workflow",
      "data": {
        "canvasVersion": 3,
        "created": "2023-10-23T14:21:13.118Z",
        "createdVersion": "5.46.0-2023.1.19.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "errorHandler": null,
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {
            "firstName": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello"
              ]
            },
            "randomName": {
              "title": "stringN",
              "type": [
                "array",
                "string",
                "boolean",
                "number"
              ],
              "items": {
                "type": "string"
              },
              "examples": [
                [
                  " World"
                ]
              ]
            }
          },
          "required": [
            "firstName",
            "randomName"
          ]
        },
        "lastUpdatedVersion": "4.69.3-2023.2.73",
        "last_updated": "2024-06-06T17:09:51.095Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "name": "TPB childJob Task with Loop and Transformation Child",
        "outputSchema": {
          "type": "object",
          "properties": {
            "firstName": {
              "title": "str",
              "type": "string",
              "examples": [
                "Hello"
              ]
            },
            "randomName": {
              "title": "stringN",
              "type": [
                "array",
                "string",
                "boolean",
                "number"
              ],
              "items": {
                "type": "string"
              },
              "examples": [
                [
                  " World"
                ]
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "combinedStrings": {
              "title": "combinedStrings",
              "type": "string",
              "examples": [
                "Hello World"
              ]
            }
          }
        },
        "preAutomationTime": 0,
        "sla": 0,
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": -444,
              "y": -24
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 144,
              "y": -24
            }
          },
          "1ecf": {
            "name": "stringConcat",
            "canvasName": "concat",
            "summary": "Concatenates strings together.",
            "description": "Concatenates a string with a second string(s). The second parameter can be a string or array.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "str": "$var.job.firstName",
                "stringN": "$var.job.randomName"
              },
              "outgoing": {
                "combinedStrings": "$var.job.combinedStrings"
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": -156,
              "y": -24
            }
          }
        },
        "transitions": {
          "workflow_start": {
            "1ecf": {
              "state": "success",
              "type": "standard"
            }
          },
          "workflow_end": {},
          "1ecf": {
            "workflow_end": {
              "state": "success",
              "type": "standard"
            }
          }
        },
        "type": "automation",
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "type": "workflow",
      "data": {
        "canvasVersion": 3,
        "created": "2023-10-23T14:20:35.585Z",
        "createdVersion": "5.46.0-2023.1.19.0",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "errorHandler": null,
        "font_size": 12,
        "inputSchema": {
          "type": "object",
          "properties": {
            "formData": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            }
          },
          "required": [
            "formData"
          ]
        },
        "lastUpdatedVersion": "4.69.3-2023.2.73",
        "last_updated": "2024-06-06T17:09:51.090Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "name": "TPB Workflow",
        "outputSchema": {
          "type": "object",
          "properties": {
            "formData": {
              "title": "obj",
              "type": "object",
              "properties": {},
              "examples": [
                {
                  "name": "value"
                }
              ]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "mop_template_results": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "analytic_template_results": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "parsed": {
              "title": "parsed",
              "type": "object"
            },
            "runComplianceBatchResult": {
              "type": [
                "array",
                "boolean",
                "null",
                "number",
                "object",
                "string"
              ]
            },
            "newName": {
              "$id": "newName",
              "type": "string",
              "examples": [
                "alice"
              ]
            }
          }
        },
        "preAutomationTime": 0,
        "sla": 0,
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": -1344,
              "y": -24
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 2796,
              "y": -24
            }
          },
          "9fed": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "Run Child Job with Loop and Transformation",
            "description": "Run Child Job with Loop and Transformation",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "TPB childJob Task with Loop and Transformation Child",
                "variables": {
                  "randomString": {
                    "task": "static",
                    "value": "jones"
                  }
                },
                "data_array": [
                  {
                    "name": "fred"
                  }
                ],
                "transformation": {
                  "_id": "653681ffa0bf200185226cdb",
                  "comments": [],
                  "description": "",
                  "functions": [],
                  "incoming": [
                    {
                      "°$id": "currentValue",
                      "type": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                      ]
                    },
                    {
                      "°$id": "randomString",
                      "type": "string",
                      "examples": [
                        "test"
                      ]
                    }
                  ],
                  "name": "TPB Transformation in childJob Input",
                  "outgoing": [
                    {
                      "°$id": "firstName",
                      "type": "string",
                      "examples": [
                        "fred"
                      ]
                    },
                    {
                      "°$id": "randomName",
                      "type": "string",
                      "examples": [
                        "jones"
                      ]
                    }
                  ],
                  "steps": [
                    {
                      "id": 4,
                      "type": "assign",
                      "from": {
                        "location": "incoming",
                        "name": "randomString",
                        "ptr": ""
                      },
                      "to": {
                        "location": "outgoing",
                        "name": "randomName",
                        "ptr": ""
                      },
                      "context": "#"
                    },
                    {
                      "id": 2,
                      "type": "assign",
                      "from": {
                        "location": "incoming",
                        "name": "currentValue",
                        "ptr": ""
                      },
                      "to": {
                        "location": "method",
                        "name": 1,
                        "ptr": "/args/0/value"
                      },
                      "context": "#"
                    },
                    {
                      "id": 1,
                      "type": "method",
                      "library": "Object",
                      "method": "getProperty",
                      "args": [
                        null,
                        "name"
                      ],
                      "view": {
                        "row": 1,
                        "col": 1
                      },
                      "context": "#"
                    },
                    {
                      "id": 3,
                      "type": "assign",
                      "from": {
                        "location": "method",
                        "name": 1,
                        "ptr": "/return"
                      },
                      "to": {
                        "location": "outgoing",
                        "name": "firstName",
                        "ptr": ""
                      },
                      "context": "#"
                    }
                  ],
                  "version": "4.3.6-2023.2.2",
                  "view": {
                    "col": 1,
                    "row": 5
                  },
                  "created": "2024-06-06T17:09:50.612Z",
                  "createdBy": "65faf9657e35d89f3c8cbeed",
                  "lastUpdated": "2024-06-06T17:09:50.612Z",
                  "lastUpdatedBy": "65faf9657e35d89f3c8cbeed"
                },
                "loopType": "sequential"
              },
              "outgoing": {
                "job_details": ""
              }
            },
            "actor": "job",
            "groups": [],
            "nodeLocation": {
              "x": -444,
              "y": -24
            }
          },
          "ba56": {
            "name": "childJob",
            "canvasName": "childJob",
            "summary": "TPB childJob Task Child",
            "description": "Runs a child job inside a workflow.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "task": "",
                "workflow": "TPB childJob Task Child",
                "variables": {
                  "firstName": {
                    "task": "static",
                    "value": "Alice"
                  },
                  "lastName": {
                    "task": "static",
                    "value": "Jones"
                  }
                },
                "data_array": "",
                "transformation": "",
                "loopType": ""
              },
              "outgoing": {
                "job_details": ""
              }
            },
            "actor": "job",
            "groups": [],
            "nodeLocation": {
              "x": -780,
              "y": -24
            }
          },
          "d4b4": {
            "name": "ShowFormByName",
            "canvasName": "ShowFormByName",
            "summary": "TPB Form",
            "description": "Show Form",
            "location": "Application",
            "app": "FormBuilder",
            "displayName": "Forms",
            "type": "manual",
            "variables": {
              "incoming": {
                "form_name": "TPB Form",
                "instance_data": {}
              },
              "outgoing": {
                "export": ""
              }
            },
            "view": "/formbuilder/task/ShowFormByName",
            "groups": [],
            "nodeLocation": {
              "x": -120,
              "y": -24
            }
          },
          "eaea": {
            "name": "ShowJsonForm",
            "canvasName": "ShowJsonForm",
            "summary": "TPB JSON Form in Workflow",
            "description": "Show Json Form",
            "location": "Application",
            "app": "JsonForms",
            "displayName": "JsonForms",
            "type": "manual",
            "variables": {
              "incoming": {
                "form_id": "TPB JSON Form in Workflow",
                "instance_data": {}
              },
              "outgoing": {
                "export": ""
              }
            },
            "view": "/json-forms/task/ShowJsonForm",
            "groups": [],
            "nodeLocation": {
              "x": 192,
              "y": -24
            }
          },
          "e322": {
            "name": "RunCommandTemplate",
            "canvasName": "RunCommandTemplate",
            "summary": "Run Command Template",
            "description": "Run a Command Template against devices.",
            "location": "Application",
            "locationType": null,
            "app": "MOP",
            "type": "automatic",
            "displayName": "MOP",
            "variables": {
              "incoming": {
                "template": "TPB Command Template",
                "variables": {},
                "devices": "$var.d29b.pushedArray"
              },
              "outgoing": {
                "mop_template_results": "$var.job.mop_template_results"
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": 822,
              "y": -24
            }
          },
          "4aa3": {
            "name": "runAnalyticsTemplate",
            "canvasName": "runAnalyticsTemplate",
            "summary": "TPB Analytic Template",
            "description": "Run an Analytic Template.",
            "location": "Application",
            "locationType": null,
            "app": "MOP",
            "type": "automatic",
            "displayName": "MOP",
            "variables": {
              "incoming": {
                "pre": "$var.e322.mop_template_results",
                "post": "$var.e322.mop_template_results",
                "analytic_template_name": "TPB Analytic Template",
                "variables": {}
              },
              "outgoing": {
                "analytic_template_results": "$var.job.analytic_template_results"
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": 1152,
              "y": -24
            }
          },
          "cad6": {
            "name": "applyTemplate",
            "canvasName": "applyTemplate",
            "summary": "Apply a template to text",
            "description": "Apply a template to parse text",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "text": "Directory of bootflash:/\n\n   11  drwx            16384   Mar 2 2015 08:46:31 +00:00  lost+found\n681409  drwx             4096   Mar 2 2015 08:47:35 +00:00  .super.iso.dir\n   12  -rw-               46  Apr 22 2016 12:36:24 +00:00  .CsrLxc_LastInstall\n   13  -rw-               84   Mar 2 2015 08:50:43 +00:00  virtual-instance.conf\n876097  drwx             4096   Mar 2 2015 08:49:40 +00:00  core\n   15  -rw-        161136640   Mar 2 2015 08:47:34 +00:00  iosxe-remote-mgmt.03.14.01.S.155-1.S1-std.ova\n519172  -rw-        250578048   Mar 2 2015 08:48:31 +00:00  csr1000v-mono-universalk9.03.14.01.S.155-1.S1-std.SPA.pkg\n519170  -rw-             4892   Mar 2 2015 08:48:30 +00:00  csr1000v-packages-universalk9.03.14.01.S.155-1.S1-std.conf\n519171  -rw-             5681   Mar 2 2015 08:48:31 +00:00  packages.conf\n827425  drwx             4096   Mar 2 2015 08:49:40 +00:00  .prst_sync\n730081  drwx             4096   Mar 2 2015 08:49:43 +00:00  .rollback_timer\n   16  -rw-                0   Mar 2 2015 08:49:46 +00:00  tracelogs.394\n\n7835619328 bytes total (6612774912 bytes free)",
                "template": "TPB TextFSM Template"
              },
              "outgoing": {
                "parsed": "$var.job.parsed"
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": 1788,
              "y": -24
            }
          },
          "42bb": {
            "name": "runComplianceForTree",
            "canvasName": "runComplianceForTree",
            "summary": "Run Compliance Reports (Tree)",
            "description": "Begin a compliance report run for a Golden Config tree.",
            "location": "Application",
            "locationType": null,
            "app": "ConfigurationManager",
            "type": "automatic",
            "displayName": "ConfigurationManager",
            "variables": {
              "incoming": {
                "treeId": "65368b61a122470141b852e6",
                "version": "version2",
                "variables": {},
                "grading": {}
              },
              "outgoing": {
                "runComplianceBatchResult": "$var.job.runComplianceBatchResult"
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": 2082,
              "y": -24
            }
          },
          "aed6": {
            "name": "transformation",
            "canvasName": "transformation",
            "summary": "TPB Transformation in Workflow Task",
            "description": "Perform a JSON Transformation using the JST library.",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "tr_id": "6536e91dbd5eea0160a56829",
                "variableMap": {
                  "name": "fred"
                },
                "options": ""
              },
              "outgoing": {
                "newName": "$var.job.newName"
              },
              "decorators": []
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": 2400,
              "y": -24
            }
          },
          "ec0a": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Render Jinja Template",
            "description": "Renders jinja template output.",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "TPB Jinja2 Template",
                "context": {
                  "name": "bob"
                }
              },
              "outgoing": {
                "renderedTemplate": ""
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": 1464,
              "y": -24
            }
          },
          "d29b": {
            "name": "arrayPush",
            "canvasName": "push",
            "summary": "Create list of devices",
            "description": "Create list of devices",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": [],
                "elementN": "$var.84e7.return_data"
              },
              "outgoing": {
                "pushedArray": ""
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": 507,
              "y": -24
            }
          },
          "84e7": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query device name from form data",
            "description": "Query device name from form data",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "device",
                "obj": "$var.job.formData"
              },
              "outgoing": {
                "return_data": ""
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": -1092,
              "y": -24
            }
          }
        },
        "transitions": {
          "workflow_start": {
            "84e7": {
              "state": "success",
              "type": "standard"
            }
          },
          "workflow_end": {},
          "9fed": {
            "d4b4": {
              "state": "success",
              "type": "standard"
            }
          },
          "ba56": {
            "9fed": {
              "state": "success",
              "type": "standard"
            }
          },
          "d4b4": {
            "eaea": {
              "state": "success",
              "type": "standard"
            }
          },
          "eaea": {
            "d29b": {
              "state": "success",
              "type": "standard"
            }
          },
          "e322": {
            "4aa3": {
              "state": "success",
              "type": "standard"
            }
          },
          "4aa3": {
            "ec0a": {
              "state": "success",
              "type": "standard"
            }
          },
          "cad6": {
            "42bb": {
              "state": "success",
              "type": "standard"
            }
          },
          "42bb": {
            "aed6": {
              "state": "success",
              "type": "standard"
            }
          },
          "aed6": {
            "workflow_end": {
              "state": "success",
              "type": "standard"
            }
          },
          "ec0a": {
            "cad6": {
              "state": "success",
              "type": "standard"
            }
          },
          "d29b": {
            "e322": {
              "state": "success",
              "type": "standard"
            }
          },
          "84e7": {
            "ba56": {
              "state": "success",
              "type": "standard"
            }
          }
        },
        "type": "automation",
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "type": "workflow",
      "data": {
        "name": "Test Workflow",
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 0,
              "y": -276
            },
            "x": 0,
            "y": 0.5
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 0,
              "y": -48
            },
            "x": 1,
            "y": 0.5
          },
          "45cf": {
            "name": "stub",
            "canvasName": "stub",
            "summary": "Stub",
            "description": "Create a stub for an automated task",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "type": "success",
                "delay": "",
                "response": ""
              },
              "outgoing": {
                "response": ""
              }
            },
            "actor": "Pronghorn",
            "groups": [],
            "nodeLocation": {
              "x": 0,
              "y": -168
            }
          }
        },
        "transitions": {
          "workflow_start": {
            "45cf": {
              "state": "success",
              "type": "standard"
            }
          },
          "workflow_end": {},
          "45cf": {
            "workflow_end": {
              "state": "success",
              "type": "standard"
            }
          }
        },
        "inputSchema": {
          "type": "object",
          "properties": {}
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            }
          }
        },
        "canvasVersion": 3,
        "type": "automation",
        "font_size": 12,
        "errorHandler": null,
        "preAutomationTime": 0,
        "sla": 0,
        "last_updated": "2024-04-11T18:34:47.342Z",
        "last_updated_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "lastUpdatedVersion": "5.55.2-2023.2.2",
        "created": "2024-04-11T18:34:20.481Z",
        "created_by": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "createdVersion": "5.55.2-2023.2.2",
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "type": "json-forms",
      "data": {
        "id": "6536ecb41227df0152025104",
        "bindingSchema": {
          "properties": {
            "device": {
              "binding:method": "POST",
              "binding:link": {
                "$ref": "/links",
                "rel": "collection"
              },
              "binding:body": {
                "options": {
                  "filter": {
                    "name": ""
                  },
                  "start": 0,
                  "limit": 25,
                  "sort": [
                    {
                      "name": 1
                    }
                  ],
                  "order": "ascending"
                }
              },
              "binding:target": {
                "propertyPointer": "/enum"
              },
              "binding:hyperSchema": {
                "type": "object",
                "base": "/configuration_manager",
                "links": [
                  {
                    "rel": "collection",
                    "href": "/devices",
                    "targetMediaType": "application/json",
                    "targetSchema": {
                      "$ref": "#"
                    },
                    "variables": []
                  }
                ]
              },
              "binding:source": {
                "propertyPointer": "/list",
                "keyPointer": "/name"
              }
            }
          }
        },
        "created": "2023-10-23T21:59:16.508Z",
        "createdBy": "admin@pronghorn",
        "description": "",
        "lastUpdated": "2024-06-06T17:09:52.676Z",
        "lastUpdatedBy": "admin@pronghorn",
        "name": "TPB JSON Form in OM Trigger",
        "schema": {
          "title": "TPB JSON Form in OM Trigger",
          "description": "",
          "type": "object",
          "required": [],
          "properties": {
            "device": {
              "type": "string",
              "title": "Device",
              "_id": "/properties/device",
              "description": "",
              "enum": [],
              "enumNames": []
            }
          }
        },
        "struct": {
          "type": "array",
          "items": [
            {
              "nodeId": "bcb31a92-7bce-41f8-8449-843e6966ccd6",
              "type": "string",
              "title": "Device",
              "description": "",
              "placeholder": "Select a device",
              "required": false,
              "enum": [],
              "enumNames": [],
              "binding": true,
              "rel": "collection",
              "targetPointer": "/enum",
              "helper": "Select device that will be used in command template",
              "method": "POST",
              "uniqueItems": false,
              "base": "/configuration_manager",
              "originalHref": "/devices",
              "href": "/devices",
              "body": {
                "options": {
                  "filter": {
                    "name": ""
                  },
                  "start": 0,
                  "limit": 25,
                  "sort": [
                    {
                      "name": 1
                    }
                  ],
                  "order": "ascending"
                }
              },
              "sourcePointer": "/list",
              "sourceKeyPointer": "/name"
            }
          ]
        },
        "uiSchema": {
          "device": {
            "ui:placeholder": "Select a device",
            "ui:help": "Select device that will be used in command template"
          }
        },
        "validationSchema": {},
        "version": "2020.1"
      }
    },
    {
      "type": "json-forms",
      "data": {
        "id": "6536879886076a01796c8083",
        "bindingSchema": {
          "properties": {
            "trigger": {
              "binding:method": "GET",
              "binding:link": {
                "$ref": "/links",
                "rel": "collection"
              },
              "binding:target": {
                "propertyPointer": "/enum"
              },
              "binding:hyperSchema": {
                "type": "object",
                "base": "/operations-manager",
                "links": [
                  {
                    "rel": "collection",
                    "href": "/triggers",
                    "targetMediaType": "application/json",
                    "targetSchema": {
                      "$ref": "#"
                    },
                    "variables": []
                  }
                ]
              },
              "binding:source": {
                "transformation": "663da1e431b5e09e96d70e07",
                "transformationUrl": "/automation-studio/json-forms/runtransformation/663da1e431b5e09e96d70e07"
              }
            }
          }
        },
        "created": "2023-10-23T14:47:52.524Z",
        "createdBy": "admin@pronghorn",
        "description": "",
        "lastUpdated": "2024-06-06T17:09:52.715Z",
        "lastUpdatedBy": "admin@pronghorn",
        "name": "TPB JSON Form in Workflow",
        "schema": {
          "title": "TPB JSON Form in Workflow",
          "description": "",
          "type": "object",
          "required": [],
          "properties": {
            "trigger": {
              "type": "string",
              "title": "Trigger",
              "_id": "/properties/trigger",
              "description": "",
              "enum": [],
              "enumNames": []
            }
          }
        },
        "struct": {
          "type": "array",
          "items": [
            {
              "nodeId": "5066de35-bda2-4a01-8dff-df185d8eeff1",
              "type": "string",
              "title": "Trigger",
              "description": "",
              "placeholder": "Select an item",
              "required": false,
              "enum": [],
              "enumNames": [],
              "binding": true,
              "rel": "collection",
              "targetPointer": "/enum",
              "method": "GET",
              "uniqueItems": false,
              "base": "/operations-manager",
              "href": "/triggers",
              "sourceKeyPointer": "",
              "transformation": "663da1e431b5e09e96d70e07",
              "sourcePointer": "",
              "originalHref": "/:id",
              "variables": []
            }
          ]
        },
        "uiSchema": {
          "trigger": {
            "ui:placeholder": "Select an item"
          }
        },
        "validationSchema": {},
        "version": "2020.1"
      }
    },
    {
      "type": "forms",
      "data": {
        "name": "TPB Form",
        "children": [
          {
            "id": "d7c9b4f9-7ef8-40fa-b876-5e9141776d8a",
            "source_type": "custom",
            "key": "key_d7c9b4f9-7ef8-40fa-b876-5e9141776d8a",
            "type": "field",
            "properties": {
              "type": "text",
              "required": false,
              "minlength": null,
              "maxlength": null,
              "regex": null
            },
            "name": "field_name"
          }
        ],
        "elements": [],
        "created": "2023-10-23T14:44:22.900Z",
        "createdBy": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "groups": [],
        "lastUpdated": "2024-06-06T17:09:53.134Z",
        "lastUpdatedBy": {
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "gitTokens": {
            "GitLab": "$ENC84e6972b5038e910a8d2021cfb8f505782e427d2d9d41cc63904c444a24946920084e2b16e0f68c93892"
          },
          "email": "chris.calloway@itential.com"
        },
        "tags": []
      }
    },
    {
      "type": "template",
      "data": {
        "_id": "6536e81ea3900a00fef388e1",
        "command": "",
        "created": "2023-10-23T21:40:25.293Z",
        "data": "Directory of bootflash:/\n\n   11  drwx            16384   Mar 2 2015 08:46:31 +00:00  lost+found\n681409  drwx             4096   Mar 2 2015 08:47:35 +00:00  .super.iso.dir\n   12  -rw-               46  Apr 22 2016 12:36:24 +00:00  .CsrLxc_LastInstall\n   13  -rw-               84   Mar 2 2015 08:50:43 +00:00  virtual-instance.conf\n876097  drwx             4096   Mar 2 2015 08:49:40 +00:00  core\n   15  -rw-        161136640   Mar 2 2015 08:47:34 +00:00  iosxe-remote-mgmt.03.14.01.S.155-1.S1-std.ova\n519172  -rw-        250578048   Mar 2 2015 08:48:31 +00:00  csr1000v-mono-universalk9.03.14.01.S.155-1.S1-std.SPA.pkg\n519170  -rw-             4892   Mar 2 2015 08:48:30 +00:00  csr1000v-packages-universalk9.03.14.01.S.155-1.S1-std.conf\n519171  -rw-             5681   Mar 2 2015 08:48:31 +00:00  packages.conf\n827425  drwx             4096   Mar 2 2015 08:49:40 +00:00  .prst_sync\n730081  drwx             4096   Mar 2 2015 08:49:43 +00:00  .rollback_timer\n   16  -rw-                0   Mar 2 2015 08:49:46 +00:00  tracelogs.394\n\n7835619328 bytes total (6612774912 bytes free)",
        "description": "",
        "group": "Test",
        "lastUpdated": "2024-06-06T17:09:51.344Z",
        "name": "TPB TextFSM Template",
        "tags": [],
        "template": "Value Filldown FILE_SYSTEM (\\S+)\nValue ID (\\d+)\nValue PERMISSIONS (\\S+)\nValue SIZE (\\d+)\nValue Fillup TOTAL_SIZE (\\d+)\nValue Fillup TOTAL_FREE (\\d+)\nValue DATE_TIME ((<no date>)|(\\w+\\s\\d+\\s\\d+\\s\\S+\\s\\S+))\nValue NAME (\\S+)\n\nStart\n  ^Directory of\\s+${FILE_SYSTEM} -> DIR\n\nDIR\n  ^Directory of\\s+${FILE_SYSTEM} -> DIR\n  ^((\\s+)*${ID})\\s+${PERMISSIONS}\\s+${SIZE}\\s+${DATE_TIME}\\s+${NAME} -> Record\n  ^${TOTAL_SIZE}\\s+\\S+\\s+\\S+\\s\\(${TOTAL_FREE} bytes free\\)\n\n#\nEOF\n",
        "type": "textfsm",
        "version": 1,
        "createdBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "email": "chris.calloway@itential.com"
        },
        "lastUpdatedBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "email": "chris.calloway@itential.com"
        }
      }
    },
    {
      "type": "template",
      "data": {
        "_id": "6536e7a7a3900a00fef388e0",
        "command": "",
        "created": "2023-10-23T21:38:01.455Z",
        "data": "{\"name\": \"bob\"}",
        "description": "",
        "group": "Test",
        "lastUpdated": "2024-06-06T17:09:51.348Z",
        "name": "TPB Jinja2 Template",
        "tags": [],
        "template": "{{name}}",
        "type": "jinja2",
        "version": 1,
        "createdBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "email": "chris.calloway@itential.com"
        },
        "lastUpdatedBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn",
          "firstname": "admin",
          "inactive": false,
          "email": "chris.calloway@itential.com"
        }
      }
    },
    {
      "type": "mop-template",
      "data": {
        "tags": [],
        "name": "TPB Command Template",
        "os": "",
        "passRule": true,
        "ignoreWarnings": false,
        "commands": [
          {
            "command": "show version",
            "passRule": true,
            "rules": [
              {
                "rule": "",
                "eval": "contains",
                "severity": "error"
              }
            ]
          }
        ],
        "created": 1698096862020,
        "createdBy": "admin@pronghorn",
        "lastUpdated": 1717693791382,
        "lastUpdatedBy": "admin@pronghorn"
      }
    },
    {
      "type": "mop-analytic-template",
      "data": {
        "tags": [],
        "name": "TPB Analytic Template",
        "passRule": true,
        "prepostCommands": [
          {
            "preRawCommand": "show version",
            "postRawCommand": "show version",
            "passRule": true,
            "rules": [
              {
                "type": "matches",
                "preRegex": "",
                "postRegex": "",
                "evaluator": "=",
                "severity": "warning"
              }
            ],
            "preCommandResHTML": "Test a command or the template to get results here",
            "postCommandResHTML": "Test a command or the template to get results here"
          }
        ],
        "created": 1698096968187,
        "createdBy": "admin@pronghorn",
        "lastUpdated": 1717693791414,
        "lastUpdatedBy": "admin@pronghorn"
      }
    },
    {
      "type": "golden-config",
      "data": {
        "status": "success",
        "data": [
          {
            "_id": "65368b611819247ce06481fd",
            "name": "TPB GC Tree",
            "version": "initial",
            "created": "1970-01-01T00:00:00.000Z",
            "createdBy": "65faf9657e35d89f3c8cbeed",
            "deviceType": "json",
            "gbac": {
              "write": [],
              "read": []
            },
            "lastUpdated": "2024-06-06T17:09:52.762Z",
            "lastUpdatedBy": "65faf9657e35d89f3c8cbeed",
            "root": {
              "name": "base",
              "attributes": {
                "tasks": [
                  "65368b61a122470141b852e9"
                ],
                "devices": [],
                "deviceGroups": [],
                "remediationWorkflow": null,
                "configId": "65368b61a122470141b852e7",
                "ruleSet": {
                  "keysExist": [],
                  "severity": {
                    "error": [],
                    "warning": [],
                    "info": []
                  },
                  "evalMode": {
                    "required": [],
                    "disallowed": [],
                    "ignored": []
                  }
                },
                "export": {
                  "_id": "65368b61a122470141b852e7",
                  "created": "2023-10-23T15:04:01.604Z",
                  "createdBy": "65faf9657e35d89f3c8cbeed",
                  "data": {},
                  "lastUpdated": "2024-06-06T17:09:52.762Z",
                  "lastUpdatedBy": "65faf9657e35d89f3c8cbeed"
                }
              },
              "children": []
            },
            "tags": [],
            "treeId": "65368b61a122470141b852e6"
          },
          {
            "_id": "65368b611819247ce06481fe",
            "name": "TPB GC Tree",
            "version": "version2",
            "base": "initial",
            "created": "1970-01-01T00:00:00.000Z",
            "createdBy": "65faf9657e35d89f3c8cbeed",
            "deviceType": "json",
            "gbac": {
              "write": [],
              "read": []
            },
            "lastUpdated": "2024-06-06T17:09:52.762Z",
            "lastUpdatedBy": "65faf9657e35d89f3c8cbeed",
            "root": {
              "name": "base",
              "attributes": {
                "tasks": [
                  "65368b61a122470141b852ea",
                  "65368b61a122470141b852eb"
                ],
                "devices": [],
                "deviceGroups": [],
                "remediationWorkflow": null,
                "configId": "65368b61a122470141b852e8",
                "ruleSet": {
                  "keysExist": [],
                  "severity": {
                    "error": [],
                    "warning": [],
                    "info": []
                  },
                  "evalMode": {
                    "required": [],
                    "disallowed": [],
                    "ignored": []
                  }
                },
                "export": {
                  "_id": "65368b61a122470141b852e8",
                  "created": "2023-10-23T15:04:01.604Z",
                  "createdBy": "65faf9657e35d89f3c8cbeed",
                  "data": {},
                  "lastUpdated": "2024-06-06T17:09:52.762Z",
                  "lastUpdatedBy": "65faf9657e35d89f3c8cbeed"
                }
              },
              "children": []
            },
            "tags": [],
            "treeId": "65368b61a122470141b852e6"
          }
        ],
        "taskInstances": [
          {
            "_id": "65368b61a122470141b852e9",
            "created": "2023-10-23T15:04:01.604Z",
            "createdBy": "65faf9657e35d89f3c8cbeed",
            "name": "testgetNEDs",
            "origin": "DSUP NSO57",
            "taskName": "getNEDs",
            "taskParams": {},
            "treeId": "65368b61a122470141b852e6",
            "updated": "2024-06-06T17:09:52.762Z",
            "updatedBy": "65faf9657e35d89f3c8cbeed"
          },
          {
            "_id": "65368b61a122470141b852ea",
            "created": "2023-10-23T15:04:01.604Z",
            "createdBy": "65faf9657e35d89f3c8cbeed",
            "name": "testgetNEDs",
            "origin": "DSUP NSO57",
            "taskName": "getNEDs",
            "taskParams": {},
            "treeId": "65368b61a122470141b852e6",
            "updated": "2024-06-06T17:09:52.762Z",
            "updatedBy": "65faf9657e35d89f3c8cbeed"
          },
          {
            "_id": "65368b61a122470141b852eb",
            "created": "2023-10-23T15:04:01.604Z",
            "createdBy": "65faf9657e35d89f3c8cbeed",
            "name": "getdeviceGroupInstance",
            "origin": "DSUP NSO57",
            "taskName": "getDeviceGroups",
            "taskParams": {},
            "treeId": "65368b61a122470141b852e6",
            "updated": "2024-06-06T17:09:52.762Z",
            "updatedBy": "65faf9657e35d89f3c8cbeed"
          }
        ]
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6536e91dbd5eea0160a56829",
        "name": "TPB Transformation in Workflow Task",
        "description": "",
        "incoming": [
          {
            "$id": "name",
            "type": "string",
            "examples": [
              "fred"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "newName",
            "type": "string",
            "examples": [
              "alice"
            ]
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "name",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 1,
            "type": "method",
            "library": "String",
            "method": "concat",
            "args": [
              null,
              " ",
              "Awesome"
            ],
            "view": {
              "row": 1,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "newName",
              "ptr": ""
            },
            "context": "#"
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 1,
          "row": 5
        },
        "created": "2024-06-06T17:09:50.576Z",
        "createdBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2024-06-06T17:09:50.576Z",
        "lastUpdatedBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.2",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "663da1e431b5e09e96d70e07",
        "name": "TPB Transformation in JSON Form in Workflow",
        "description": "",
        "incoming": [
          {
            "$id": "data",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "examples": [
                    "649efda55073220157ca5ed2"
                  ]
                },
                "created": {
                  "type": "string",
                  "examples": [
                    "2023-04-06T20:45:18.238Z"
                  ],
                  "format": "date-time"
                },
                "createdBy": {
                  "type": "string",
                  "examples": [
                    "admin@pronghorn"
                  ]
                },
                "lastUpdated": {
                  "type": "string",
                  "examples": [
                    "2023-06-30T16:07:01.741Z"
                  ],
                  "format": "date-time"
                },
                "lastUpdatedBy": {
                  "type": "string",
                  "examples": [
                    "admin@pronghorn"
                  ]
                },
                "name": {
                  "type": "string",
                  "examples": [
                    "Gitlab get a diff of merge"
                  ]
                },
                "type": {
                  "type": "string",
                  "examples": [
                    "manual"
                  ]
                },
                "enabled": {
                  "type": "boolean",
                  "examples": [
                    true,
                    false
                  ]
                },
                "actionType": {
                  "type": "string",
                  "examples": [
                    "automations"
                  ]
                },
                "actionId": {
                  "type": "string",
                  "examples": [
                    "642f2f1dfe6f9a0168f08083"
                  ]
                },
                "description": {
                  "type": "string",
                  "examples": [
                    "Gitlab get a diff of merge"
                  ]
                },
                "formId": {
                  "type": "string",
                  "examples": [
                    "642f2dd33ef1c801102a2089"
                  ]
                },
                "formData": {
                  "type": "null"
                },
                "formSchemaHash": {
                  "type": "string",
                  "examples": [
                    "17c8532fcbf9aada0b9746b4dd22a14553b03670bf297266fb16fdd9281bbbed"
                  ]
                },
                "lastExecuted": {
                  "type": "null"
                }
              },
              "required": []
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "names",
            "type": "array",
            "items": {
              "type": "string",
              "examples": [
                "test"
              ]
            }
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [
              null,
              "mapNames"
            ],
            "view": {
              "row": 1,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "names",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "data",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "examples": [
                      "649efda55073220157ca5ed2"
                    ]
                  },
                  "created": {
                    "type": "string",
                    "examples": [
                      "2023-04-06T20:45:18.238Z"
                    ],
                    "format": "date-time"
                  },
                  "createdBy": {
                    "type": "string",
                    "examples": [
                      "admin@pronghorn"
                    ]
                  },
                  "lastUpdated": {
                    "type": "string",
                    "examples": [
                      "2023-06-30T16:07:01.741Z"
                    ],
                    "format": "date-time"
                  },
                  "lastUpdatedBy": {
                    "type": "string",
                    "examples": [
                      "admin@pronghorn"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "examples": [
                      "Gitlab get a diff of merge"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "examples": [
                      "manual"
                    ]
                  },
                  "enabled": {
                    "type": "boolean",
                    "examples": [
                      true,
                      false
                    ]
                  },
                  "actionType": {
                    "type": "string",
                    "examples": [
                      "automations"
                    ]
                  },
                  "actionId": {
                    "type": "string",
                    "examples": [
                      "642f2f1dfe6f9a0168f08083"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "examples": [
                      "Gitlab get a diff of merge"
                    ]
                  },
                  "formId": {
                    "type": "string",
                    "examples": [
                      "642f2dd33ef1c801102a2089"
                    ]
                  },
                  "formData": {
                    "type": "null"
                  },
                  "formSchemaHash": {
                    "type": "string",
                    "examples": [
                      "17c8532fcbf9aada0b9746b4dd22a14553b03670bf297266fb16fdd9281bbbed"
                    ]
                  },
                  "lastExecuted": {
                    "type": "null"
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "examples": [
                        "649efda55073220157ca5ed2"
                      ]
                    },
                    "created": {
                      "type": "string",
                      "examples": [
                        "2023-04-06T20:45:18.238Z"
                      ],
                      "format": "date-time"
                    },
                    "createdBy": {
                      "type": "string",
                      "examples": [
                        "admin@pronghorn"
                      ]
                    },
                    "lastUpdated": {
                      "type": "string",
                      "examples": [
                        "2023-06-30T16:07:01.741Z"
                      ],
                      "format": "date-time"
                    },
                    "lastUpdatedBy": {
                      "type": "string",
                      "examples": [
                        "admin@pronghorn"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "examples": [
                        "Gitlab get a diff of merge"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "examples": [
                        "manual"
                      ]
                    },
                    "enabled": {
                      "type": "boolean",
                      "examples": [
                        true,
                        false
                      ]
                    },
                    "actionType": {
                      "type": "string",
                      "examples": [
                        "automations"
                      ]
                    },
                    "actionId": {
                      "type": "string",
                      "examples": [
                        "642f2f1dfe6f9a0168f08083"
                      ]
                    },
                    "description": {
                      "type": "string",
                      "examples": [
                        "Gitlab get a diff of merge"
                      ]
                    },
                    "formId": {
                      "type": "string",
                      "examples": [
                        "642f2dd33ef1c801102a2089"
                      ]
                    },
                    "formData": {
                      "type": "null"
                    },
                    "formSchemaHash": {
                      "type": "string",
                      "examples": [
                        "17c8532fcbf9aada0b9746b4dd22a14553b03670bf297266fb16fdd9281bbbed"
                      ]
                    },
                    "lastExecuted": {
                      "type": "null"
                    }
                  },
                  "required": []
                },
                "$id": "array",
                "optional": true
              }
            ],
            "outgoing": [
              {
                "$id": "newValue",
                "type": "string",
                "examples": [
                  "name"
                ]
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/name"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                },
                "context": "#"
              }
            ],
            "functions": [],
            "name": "mapNames",
            "view": {
              "col": 1,
              "row": 4
            },
            "id": "mapNames",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 1,
          "row": 5
        },
        "created": "2024-06-06T17:09:50.620Z",
        "createdBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2024-06-06T17:09:50.620Z",
        "lastUpdatedBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.2",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "653681ffa0bf200185226cdb",
        "name": "TPB Transformation in childJob Input",
        "description": "",
        "incoming": [
          {
            "$id": "currentValue",
            "type": [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          },
          {
            "$id": "randomString",
            "type": "string",
            "examples": [
              "test"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "firstName",
            "type": "string",
            "examples": [
              "fred"
            ]
          },
          {
            "$id": "randomName",
            "type": "string",
            "examples": [
              "jones"
            ]
          }
        ],
        "steps": [
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "randomString",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "randomName",
              "ptr": ""
            },
            "context": "#"
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "currentValue",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            },
            "context": "#"
          },
          {
            "id": 1,
            "type": "method",
            "library": "Object",
            "method": "getProperty",
            "args": [
              null,
              "name"
            ],
            "view": {
              "row": 1,
              "col": 1
            },
            "context": "#"
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "firstName",
              "ptr": ""
            },
            "context": "#"
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 1,
          "row": 5
        },
        "created": "2024-06-06T17:09:50.612Z",
        "createdBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2024-06-06T17:09:50.612Z",
        "lastUpdatedBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.2",
        "tags": []
      }
    },
    {
      "type": "transformation",
      "data": {
        "_id": "6536ed38bd5eea0160a5682a",
        "name": "TPB Transformation in API Trigger",
        "description": "",
        "incoming": [
          {
            "$id": "testDeviceName",
            "type": "string",
            "examples": [
              "test"
            ]
          }
        ],
        "outgoing": [
          {
            "$id": "formData",
            "type": "object",
            "properties": {
              "device": {
                "type": "string",
                "examples": [
                  "test"
                ]
              }
            },
            "required": []
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "testDeviceName",
              "ptr": ""
            },
            "to": {
              "location": "outgoing",
              "name": "formData",
              "ptr": "/device"
            },
            "context": "#"
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 1,
          "row": 5
        },
        "created": "2024-06-06T17:09:50.586Z",
        "createdBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "lastUpdated": "2024-06-06T17:09:50.586Z",
        "lastUpdatedBy": {
          "_id": "65faf9657e35d89f3c8cbeed",
          "provenance": "local_aaa",
          "username": "admin@pronghorn"
        },
        "version": "4.3.6-2023.2.2",
        "tags": []
      }
    }
  ],
  "readme": "# Pre-Built Name\n\n## Table of Contents\n\n- [Pre-Built Name](#pre-built-name)\n  - [Table of Contents](#table-of-contents)\n  - [Overview](#overview)\n    - [Capabilities](#capabilities)\n    - [Prerequisites](#prerequisites)\n    - [How to Install](#how-to-install)\n    - [Testing](#testing)\n      - [Adapters](#adapters)\n      - [External Systems](#external-systems)\n  - [Using this Pre-Built](#using-this-pre-built)\n    - [Entry Point IAP Component](#entry-point-iap-component)\n    - [Inputs](#inputs)\n    - [Outputs](#outputs)\n  - [Additional Information](#additional-information)\n\n## Overview\n\nA high level overview of what the Pre-Built does.\n\n### Capabilities\n\nTest adding new text\n\nA list of capabilities of what the Pre-Built. For example:\n\n- Onboard a device to controller\n- Perform a software upgrade\n\n### Prerequisites\n\nUsers must satisfy the following prerequisites to install and run this Pre-Built:\n\n- Itential Automation Platform\n  - `2023.2.x`\n\n### How to Install\n\nTo install this Pre-Built:\n\n- Verify that you are running the documented [prerequisites](#prerequisites) in order to install the Pre-Built.\n\n- Follow the instructions on the Itential Documentation site for [importing a Pre-Built](https://docs.itential.com/docs/importing-a-prebuilt-cloud).\n\n### Testing\n\nAny information related to what testing has been done to ensure this Pre-Built runs as expected.\n\n### Adapters\n\nAny adapters that need to be installed on IAP to run the Pre-Built. Ideally would also include the adapter version here.\n\n### External Systems\n\nAny external systems needed to run the Pre-Built. Ideally would also include the external system API and/or OS version here.\n\n## Using this Pre-Built\n\nAny information for how to use this Pre-Built. For instance, if meant to be run in a childJob task of a larger use case, can state this Pre-Built can be run in a [childJob task](https://docs.itential.com/docs/childjob-task-iap-2023-2).\n\nIf the Pre-Built is intended to be run from a northbound system using an API call or to be scheduled to run or manully run whenever needed, can state this Pre-Built can be run by the corresponding [Operations Manager automation trigger](https://docs.itential.com/docs/triggers-ops-manager-iap).\n\n### Entry Point IAP Component\n\nThe name of the IAP component used to start the Pre-Built. This could be a workflow, an Operations Manager automation, a Transformation (JST), or some other IAP component.\n\n### Inputs\n\nAny information about the inputs to this Pre-Built.\n\n### Outputs\n\nAny information about the outputs to this Pre-Built.\n\n### Additional Information\n\nAny additional information related to the Pre-Built.\n"
}